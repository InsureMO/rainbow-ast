// ðŸ†˜ assert -> keyword
// ðŸ†˜ block -> code block, closure
// âœ… break -> keyword
// âœ… continue -> keyword
// ðŸ†˜ do-while -> keyword
// ðŸ†˜ for -> keyword
// ðŸ†˜ if-else -> keyword
// ðŸ†˜ label -> identifier: statement
// ðŸ†˜ variable -> tsscmfv, partial done
// ðŸ†˜ return -> keyword
// âœ… semicolon -> common
// âœ… switch-case -> keyword
// âœ… synchronized block -> tsscmfv
// ðŸ†˜ throw -> keyword
// âœ… try-catch -> keyword
// ðŸ†˜ while -> keyword
// ðŸ†˜ yield -> keyword

// what follows is either a normal argument, parens,
// an appended block, an index operation, or nothing
// parens (a b already processed):
//      a b c() d e -> a(b).c().d(e)
//      a b c()() d e -> a(b).c().call().d(e)
// index (a b already processed):
//      a b c[x] d e -> a(b).c[x].d(e)
//      a b c[x][y] d e -> a(b).c[x][y].d(e)
// block (a b already processed):
//      a b c {x} d e -> a(b).c({x}).d(e)
//
// parens/block completes method call
// index makes method call to property get with index
