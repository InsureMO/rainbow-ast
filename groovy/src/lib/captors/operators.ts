export const OperatorPatterns = {
	// groovy operators
	RangeInclusive: '..',
	RangeExclusiveLeft: '<..',
	RangeExclusiveRight: '..<',
	RangeExclusiveFull: '<..<',
	SpreadDot: '*.',
	SafeDot: '?.',
	SafeIndex: '?[',
	SafeIndexClose: ']',
	SafeChainDot: '??.',
	Elvis: '?:',
	ElvisAssign: '?=',
	MethodPointer: '.&',
	RegexFind: '=~',
	RegexMatch: '==~',
	Power: '**',
	PowerAssign: '**=',
	Spaceship: '<=>',
	Identical: '===',
	NotIdentical: '!==',
	In: 'in',
	NotInstanceOf: '!instanceof;fn#NotJNamePart:!',
	NotIn: '!in;fn#NotJNamePart:!',
	// operators
	Assign: '=',
	GreaterThan: '>',
	LessThan: '<',
	Not: '!',
	Bitnot: '~',
	Question: '?',
	Colon: '{{Colon}}',
	Equal: '==',
	LessThanOrEqual: '<=',
	GreaterThanOrEqual: '>=',
	NotEqual: '!=',
	And: '&&',
	Or: '||',
	Increase: '++',
	Decrease: '--',
	Add: '+',
	Subtract: '-',
	Multiple: '*',
	Divide: '/',
	Bitand: '&',
	Bitor: '|',
	Xor: '^',
	Mod: '%',
	Lshift: '<<',
	Rshift: '>>',
	Urshift: '>>>',
	AddAssign: '+=',
	SubtractAssign: '-=',
	MultipleAssign: '*=',
	DivideAssign: '/=',
	BitandAssign: '&=',
	BitorAssign: '|=',
	XorAssign: '^=',
	ModAssign: '%=',
	LshiftAssign: '<<=',
	RshiftAssign: '>>=',
	UrshiftAssign: '>>>=',
	Ellipsis: '...',
	Arrow: '->',
	InstanceOf: 'instanceof',
	MethodReference: '::'
};

// export const OperatorTokenMatchers = buildTokenMatchers(OperatorPatterns);
