export enum GroovyTokenId {
	CompilationUnit,
	// whitespace, tabs and newline
	Whitespaces,
	Tabs,
	Newline,
	// bracket
	LBrace,
	RBrace,
	LBrack,
	RBrack,
	LParen,
	RParen,
	LAngle,
	RAngle,
	// symbol
	/** / */ Slash,
	/** \ */ Backslash,
	/** ~ */ Tilde,
	/** @ */ At,
	/** # */ Hash,
	/** $ */ Dollar,
	/** % */ Percent,
	/** ^ */ Exponent,
	/** & */ Ampersand,
	/** * */ Asterisk,
	/** ?, S means symbol, to avoid duplication with the "Question" in the operators */ QuestionS,
	/** - */ Minus,
	/** + */ Plus,
	/** =, S means symbol, to avoid duplication with the "Equal(==)" in the operators */ EqualS,
	/** _ */ Underscore,
	/** | */ Pipe,
	/** ' */ Quote,
	/** " */ DblQuote,
	/** ` */ BackQuote,
	/** . */ Dot,
	/** , */ Comma,
	/** :, S means symbol, to avoid duplication with the "Colon" in the operators  */ ColonS,
	/** ; */ Semicolon,
	// literal
	// number literal
	BinaryLiteral,
	/** 0B, 0b */ BinaryStartMark,
	OctalLiteral,
	/** 0 */ OctalStartMark,
	IntegerLiteral,
	HexadecimalLiteral,
	/** 0X, 0x */ HexadecimalStartMark,
	DecimalLiteral,
	/** 0-9, a-f, A-F, continuous. allowed number depends on radix (binary, octal, integral and hexadecimal) */ Numbers,
	/** _, continuous */NumberSeparators,
	/** . */ NumberDecimalPoint,
	NumberExponent,
	/** Ee */ NumberExponentStartMark,
	/** +- */ NumberExponentSign,
	/** IiLlFfDdGg */ NumberSuffix,
	// string literal
	/** single quote string literal */ SsqSLiteral,
	/** single quote string literal mark */ SsqSLMark,
	/** triple quotes string literal */ TsqSLiteral,
	/** triple quotes string literal mark */ TsqSLMark,
	/** single double-quotes gstring literal */ SdqGsLiteral,
	/** single double-quotes gstring literal mark */ SdqGsLMark,
	/** triple double-quotes gstring literal */ TdqGsLiteral,
	/** triple double-quotes gstring literal mark */ TdqGsLMark,
	/** slashy gstring literal */ SGsLiteral,
	/** slashy gstring literal mark */ SGsLMark,
	/** dollar slashy gstring literal */ DsGsLiteral,
	/** dollar slashy gstring literal start mark */ DsGsLStartMark,
	/** dollar slashy gstring literal end mark */ DsGsLEndMark,
	/** \b */ BackspaceEscape,
	/** \f */ FormFeedEscape,
	/** \n */ NewlineEscape,
	/** \r */ CarriageReturnEscape,
	/** \t */ TabulationEscape,
	/** \\ */ BackslashEscape,
	/** \' */ SingleQuoteEscape,
	/** \" */ DoubleQuotesEscape,
	/** \$ for all quote string literals, $$ for slashy dollar gstring literal */ DollarEscape,
	/** \/ for slashy gstring literals, $/ for slashy dollar gstring literal */ SlashEscape,
	/** \xxx, 1-3 x, x is 0-7 */ OctalEscape,
	/** \ */ OctalEscapeStartMark,
	OctalEscapeContent,
	/** \uxxxx, 1-4 x, x is 0-9, a-f, A-F */ UnicodeEscape,
	/** \u */ UnicodeEscapeStartMark,
	UnicodeEscapeContent,
	/** incorrect escape of string literal, incorrect unicode escape is not included */ BadEscape,
	/** newline eraser for multiple-lines string/gstring */ MLSNewlineEraser,
	/** gstring interpolation */ GsInterpolation,
	/** gstring interpolation start mark, $ */ GsiStartMark,
	/** gstring interpolation start mark, ${ */ GsiBraceStartMark,
	/** gstring interpolation end mark, } */ GsiBraceEndMark,
	// boolean literal
	True,
	False,
	// primitive types
	BOOLEAN,
	CHAR,
	BYTE,
	SHORT,
	INT,
	LONG,
	FLOAT,
	DOUBLE,
	// groovy keywords
	/** G1.0 */ AS,
	/** G1.0 */ DEF,
	/** G2.3 */ TRAIT,
	/** reserved, threadsafe */ THREADSAFE,
	// java keywords
	/** 1.0 */ ABSTRACT,
	/** 1.4 */ ASSERT,
	/** 5 @interface */ AT_INTERFACE,
	/** 1.0 */ BREAK,
	/** 1.0 */ CASE,
	/** 1.0 */ CATCH,
	/** 1.0 */ CLASS,
	/** reserved, 1.0 */ CONST,
	/** 1.0 */ CONTINUE,
	/** 1.0 */ DEFAULT,
	/** 1.0 */ DO,
	/** 1.0 */ ELSE,
	/** 5 */ ENUM,
	/** 1.0 */ EXTENDS,
	/** 1.0 */ FINAL,
	/** 1.0 */ FINALLY,
	/** 1.0 */ FOR,
	/** reserved, 1.0 */ GOTO,
	/** 1.0 */ IF,
	/** 1.0 */ IMPLEMENTS,
	/** 1.0 */ IMPORT,
	/** 1.0 */ INTERFACE,
	/** 1.0 */ NATIVE,
	/** 1.0 */ NEW,
	/** 17, non-sealed */ NON_SEALED,
	/** 1.0 */ NULL,
	/** 1.0 */ PACKAGE,
	/** 15 */ PERMITS,
	/** 1.0 */ PRIVATE,
	/** 1.0 */ PROTECTED,
	/** 1.0 */ PUBLIC,
	/** 16 */ RECORD,
	/** 1.0 */ RETURN,
	/** 15 */ SEALED,
	/** 1.0 */ STATIC,
	/** 1.2 */ STRICTFP,
	/** 1.0 */ SUPER,
	/** 1.0 */ SWITCH,
	/** 1.0 */ SYNCHRONIZED,
	/** 1.0 */ THIS,
	/** 1.0 */ THROW,
	/** 1.0 */ THROWS,
	/** 1.0 */ TRANSIENT,
	/** 1.0 */ TRY,
	/** 10 */ VAR,
	/** 1.0 */ VOID,
	/** 1.0 */ VOLATILE,
	/** 1.0 */ WHILE,
	/** 14 */ YIELD,
	// DO NOT change the order of groovy and java operators, value compare is part of logic.
	// Groovy Operators
	/** .. */ RangeInclusive,
	/** <.. */ RangeExclusiveLeft,
	/** ..< */ RangeExclusiveRight,
	/** <..< */ RangeExclusiveFull,
	/** *. */ SpreadDot,
	/** ?. */ SafeDot,
	/** ?[ */ SafeIndex,
	/** ] */ SafeIndexClose,
	/** ??. */ SafeChainDot,
	/** ?: */ Elvis,
	/** .& */ MethodPointer,
	/** ::, also supported by java */ MethodReference,
	/** =~ */ RegexFind,
	/** ==~ */ RegexMatch,
	/** ** */ Power,
	/** **= */ PowerAssign,
	/** <=> */ Spaceship,
	/** === */ Identical,
	/** !== */ NotIdentical,
	/** ->, also supported by java, lambda */ Arrow,
	/** G1.0 */ In,
	/** !in */ NotIn,
	/** !instanceof */ NotInstanceOf,
	// Java Operators
	/** = */ Assign,
	/** > */ GreaterThan,
	/** < */ LessThan,
	/** ! */ Not,
	/** ~ */ Bitnot,
	/** ? */ Question,
	/** : */ Colon,
	/** == */ Equal,
	/** <= */ LessThanOrEqual,
	/** >= */ GreaterThanOrEqual,
	/** != */ NotEqual,
	/** && */ And,
	/** || */ Or,
	/** ++ */ Increase,
	/** -- */ Decrease,
	/** + */ Add,
	/** - */ Subtract,
	/** * */ Multiple,
	/** / */ Divide,
	/** & */ Bitand,
	/** | */ Bitor,
	/** ^ */ Xor,
	/** % */ Mod,
	/** << */ Lshift,
	/** >> */ Rshift,
	/** >>> */ Urshift,
	/** += */ AddAssign,
	/** -= */ SubtractAssign,
	/** *= */ MultipleAssign,
	/** /= */ DivideAssign,
	/** &= */ BitandAssign,
	/** |= */ BitorAssign,
	/** ^= */ XorAssign,
	/** %= */ ModAssign,
	/** <<= */ LshiftAssign,
	/** >>= */ RshiftAssign,
	/** >>>= */ UrshiftAssign,
	/** ?= */ ElvisAssign,
	/** ... */ Ellipsis,
	/** 1.0 */ InstanceOf,
	// chars
	Identifier,
	Word,
	UndeterminedChar,
	// shebang
	Shebang,
	/** #! */ ShebangStartMark,
	// comment
	SLComment,
	/** // */ SLCommentStartMark,
	MLComment,
	/** /* */ MLCommentStartMark,
	/** * / (no blank in the middle) */ MLCommentEndMark,
	// declaration
	AsDecl,
	PackageDecl,
	ImportDecl,
	/*
	 * temporary csscmf declaration, could be one of following:
	 * type, static block, synchronized block, constructor, method, field, variable
	 */
	TsscmfvDecl,
	TypeDecl,
	ModifierDecl,
	TypeInheritDecl,
	TypeBody,
	StaticBlockDecl,
	StaticBody,
	SyncBlockDecl,
	SyncExpr,
	SyncBody,
	MethodDecl,
	MethodReturnDecl,
	MethodParamsDecl,
	MethodParamDecl,
	MethodThrowsDecl,
	MethodBody,
	FieldDecl,
	VarDecl,
}

export const T = GroovyTokenId;
