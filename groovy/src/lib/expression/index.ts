// ðŸ†˜ cast -> (type) exp
// ðŸ†˜ postfix -> i++, i--
// âœ… switch -> keyword
// ðŸ†˜ bitnot -> level #1: ~exp
// ðŸ†˜ not -> level #1: !exp
// ðŸ†˜ power -> level #2: exp1 ** exp2; cannot have newline before **
// ðŸ†˜ increase -> level #3: ++exp
// ðŸ†˜ decrease -> level #3: --exp
// ðŸ†˜ positive -> level #3: +exp
// ðŸ†˜ negative -> level #3: -exp
// ðŸ†˜ multiple -> level #4: exp1 * exp2
// ðŸ†˜ divide -> level #4: exp1 / exp2; cannot have newline before /
// ðŸ†˜ modulo -> level #4: exp1 % exp2
// ðŸ†˜ add -> level #5: exp1 + exp2
// ðŸ†˜ subtract -> level #5: exp1 - exp2
// ðŸ†˜ lshift -> level #6: exp1 << exp2
// ðŸ†˜ rshift -> level #6: exp1 >> exp2
// ðŸ†˜ urshift -> level #6: exp1 >>> exp2
// ðŸ†˜ range inclusive -> level #6: exp1 .. exp2
// ðŸ†˜ range exclusive left -> level #6: exp1 <.. exp2
// ðŸ†˜ range exclusive right -> level #6: exp1 ..< exp2
// ðŸ†˜ range exclusive full -> level #6: exp1 <..< exp2
// âœ… as type -> keyword. level #7: exp as type; cannot have newline before as
// ðŸ†˜ instanceof -> level #7: exp instanceof type
// ðŸ†˜ not instanceof -> level #7: exp !instanceof type
// ðŸ†˜ less than or equal -> level #7: exp1 <= exp2
// ðŸ†˜ greater than or equal -> level #7: exp1 >= exp2
// ðŸ†˜ less than -> level #7: exp1 < exp2
// ðŸ†˜ greater than -> level #7: exp1 > exp2
// ðŸ†˜ in -> level #7: exp1 in exp2
// ðŸ†˜ not in -> level #7: exp1 !in exp2
// ðŸ†˜ identical -> level #8: exp1 === exp2
// ðŸ†˜ not identical -> level #8: exp1 !== exp2
// ðŸ†˜ equal -> level #8: exp1 == exp2
// ðŸ†˜ not equal -> level #8: exp1 != exp2
// ðŸ†˜ spaceship -> level #8: exp1 <=> exp2
// ðŸ†˜ regex find -> level #8.5: exp1 =~ exp2
// ðŸ†˜ regex match -> level #8.5: exp1 ==~ exp2
// ðŸ†˜ bitand -> level #9: exp1 & exp2
// ðŸ†˜ bitxor -> level #10: exp1 ^ exp2
// ðŸ†˜ bitor -> level #11: exp1 | exp2
// ðŸ†˜ and -> level #12: exp1 && exp2
// ðŸ†˜ or -> level #13: exp1 || exp2
// ðŸ†˜ ternary expression -> level #14: exp1 ? exp2 : exp3
// ðŸ†˜ elvis -> level #14: exp1 ?: exp2
// ðŸ†˜ assign -> level #15: exp1 = exp2
// ðŸ†˜ power assign -> level #15: exp1 **= exp2
// ðŸ†˜ multiple assign -> level #15: exp1 *= exp2
// ðŸ†˜ divide assign -> level #15: exp1 /= exp2
// ðŸ†˜ modulo assign -> level #15: exp1 %= exp2
// ðŸ†˜ add assign -> level #15: exp1 += exp2
// ðŸ†˜ sub assign -> level #15: exp1 -= exp2
// ðŸ†˜ lshift assign -> level #15: exp1 <<= exp2
// ðŸ†˜ rshift assign -> level #15: exp1 >>= exp2
// ðŸ†˜ urshift assign -> level #15: exp1 >>>= exp2
// ðŸ†˜ bitand assign -> level #15: exp1 &= exp2
// ðŸ†˜ bitxor assign -> level #15: exp1 ^= exp2
// ðŸ†˜ bitor assign -> level #15: exp1 |= exp2
// ðŸ†˜ elvis assign -> level #15: exp1 ?= exp2
// ðŸ†˜ multiple assignment / destructure -> level #15: (var1, var2) = [1, 2]; (var1, var2) = obj
